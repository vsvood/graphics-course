#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba8) uniform image2D resultImage;

float iTime = 8.10;
vec2 iResolution = vec2(1280, 720);

float opSmoothUnion(float d1, float d2, float k) {
  float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);
  return mix(d2, d1, h) - k * h * (1.0 - h);
}

float map(vec3 pos) {
    float d1 = length(pos) - 1.0;
    vec3 center2 = vec3(cos(iTime * 0.75) * 4.0, 0.0, 0.0);
    float d2 = length(pos - center2) - 1.0;
    vec3 center3 = vec3(0.0, cos(iTime * 2.25) * 3.0, 0.0);
    float d3 = length(pos - center3) - 1.0;
    return opSmoothUnion(d2, opSmoothUnion(d1, d3, 0.5), 0.7);
}

vec3 getNormal(vec3 p) {
  vec2 d = vec2(0.01, 0.0);
  float gx = map(p + d.xyy) - map(p - d.xyy);
  float gy = map(p + d.yxy) - map(p - d.yxy);
  float gz = map(p + d.yyx) - map(p - d.yyx);
  vec3 normal = vec3(gx, gy, gz);
  return normalize(normal);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    float I_a = 0.2;
    float I_d = 1.0;
    float I_s = 1.0;
    float n = 64.0;
    
    vec2 uv = fragCoord.xy / iResolution.xy;
    uv = uv * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;
    vec3 col = vec3(0.0);
    vec3 ro = vec3(0.0, 0.0, 4.0);
    vec3 rd = normalize(vec3(uv, -1.0));
    float t = 0.0;
    for (int i = 0; i < 64; i++)
    {
        vec3 pos = ro + rd * t;
        float d = map(pos);
        t += d;
        if (d < 0.001)
        {
            vec3 n = getNormal(pos);
            vec3 l = normalize(vec3(cos(iTime* 1.2), cos(iTime* 1.3) * sin(iTime* 1.4), sin(iTime * 1.5)));
            vec3 r = l - 2.0*dot(l, n) * n;
            float diff = clamp(I_d * dot(n, l), 0.0, 1.0);
            float spec = clamp(I_s * pow(max(0.0, dot(r, rd)), 64.0), 0.0, 1.0);
            float res = clamp(I_a + diff + spec, 0.0, 1.0);
            col = vec3(res);
            break;
        }
    }
    fragColor = vec4(col, 1.0);
}


void main()
{
  ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
  vec4 fragColor;

  mainImage(fragColor, uv);

  // TODO: Put your shadertoy code here!
  // Simple gradient as a test.
  vec3 color = vec3(vec2(uv) / vec2(1280, 720), 0);

  if (uv.x < 1280 && uv.y < 720)
    imageStore(resultImage, uv, fragColor);
}
